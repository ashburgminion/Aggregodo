{%- extends "base.njk" -%}
{%- set params -%}
  {%- if limit -%}
    &limit={{ limit }}
  {%- endif -%}
  {%- if search -%}
    &search={{ search }}
  {%- endif -%}
{%- endset -%}
{%- block section -%}
  {%- if feed -%}Feed{%- endif -%}
{%- endblock -%}
{%- block title -%}
  {%- if feed -%}{{ feed.name }} | Feed{%- endif -%}
{%- endblock -%}
{%- block classes -%}
  {%- if Prefs.DefaultView == 'grid' -%} grid-layout {%- endif -%}
  {%- if Prefs.DefaultView == 'list' -%} list-layout {%- endif -%}
  {%- if Prefs.DefaultView == 'flow' -%} flow-layout {%- endif -%}
{%- endblock -%}
{%- block menuitems -%}
  <li><button class="mdl-menu__item" onclick="navigator.clipboard.writeText((location.href.endsWith('/') ? location.href.slice(0, -1) : location.href) + '/atom');">Copy Bridge URL (Atom)</button></li>
  {# { % if Config.Development % }
    <li><button class="mdl-menu__item">Update Feed</button></li>
  { % endif % } #}
{%- endblock -%}
{%- block content -%}
  {% if feed %}
    <div class="-mdl-layout__header-row" style="padding: 0 16px; display: flex;">
      <div>
        <h3 style="word-break: break-word;">
          <div class="minilogo" style="float: left; background-image: url('{{ feed.icon }}');">
            {% if not feed.icon %}<i class="material-icons">feed</i>{% endif %}
          </div>
          <span>{{ feed.name }}</span>
        </h3>
        <p style="word-break: break-word;"><a href="{{ feed.url }}" target="_blank" class="link-iconed">
          <i class="material-icons">open_in_new</i>
          {{ feed.url }}
        </a></p>
        {% if feed.description %}
          <p>
            {% for line in feed.description.split('\n') %}
              {{ line }}<br />
            {% endfor %}
          </p>
        {% endif %}
      </div>
      <div class="mdl-layout-spacer" style="word-break: break-word;"></div>
      <div style="padding: /* 0 8px */ 24px 0;">
        <button id="copy-link" class="mdl-button mdl-js-button mdl-button--icon" onclick="navigator.clipboard.writeText(location.href);">
          <i class="material-icons">link</i>
        </button>
        <span for="copy-link" class="mdl-tooltip">Copy Link</span>
      </div>
    </div>
  {% endif %}

  <div class="top-actions">
    <div style="flex: 1;">
      {# abc #}
    </div>
    <div class="layout-toggle">
      <label class="mdl-icon-toggle mdl-js-icon-toggle mdl-js-ripple-effect" for="grid-view" title="Grid View">
        <input type="radio" id="grid-view" class="mdl-icon-toggle__input" name="layout-toggle" {% if Prefs.DefaultView == 'grid' %} checked {% endif %} />
        <i class="mdl-icon-toggle__label material-icons">view_module</i>
      </label>
      <label class="mdl-icon-toggle mdl-js-icon-toggle mdl-js-ripple-effect" for="list-view" title="List View">
        <input type="radio" id="list-view" class="mdl-icon-toggle__input" name="layout-toggle" {% if Prefs.DefaultView == 'list' %} checked {% endif %} />
        <i class="mdl-icon-toggle__label material-icons">view_list</i>
      </label>
      <label class="mdl-icon-toggle mdl-js-icon-toggle mdl-js-ripple-effect" for="flow-view" title="Flow View">
        <input type="radio" id="flow-view" class="mdl-icon-toggle__input" name="layout-toggle" {% if Prefs.DefaultView == 'list' %} checked {% endif %} />
        <i class="mdl-icon-toggle__label material-icons">view_stream</i>
      </label>
    </div>
  </div>
  
  <div id="grid-layout" class="mdl-grid">
    {% for entry in entries %}
      <a rel="noopener"
        {% if Prefs.ReaderMode %}
          href="{{ urlFor('/entry/:entry', { entry: slugifyUrl(entry.link) }) }}"
        {% else %}
          href="{{ entry.link }}" target="_blank"
        {% endif %}
      class="mdl-card mdl-shadow--2dp rss-card mdl-cell">
        <div class="rss-card-image">
          {% if entry.embed %}
            <iframe {% if entry.image %} style="background-image: url('{{ entry.image }}');" {% endif %} src="{{ entry.embed }}" loading="lazy" allow="fullscreen" allowfullscreen></iframe>
          {% elif entry.video %}
            <video src="{{ entry.video }}" controls></video>
          {% elif entry.image %}
            <img src="{{ entry.image }}" loading="lazy" />
          {% endif %}
        </div>
        <div class="rss-card-content">
          <div class="rss-card-title">{{ entry.title }}</div>
          <div class="rss-card-preview">{{ entry.summary }}</div>
        </div>
        <div class="rss-card-meta">
          <span>
            <span class="icon">
              {% if feeds[entry.feedId].icon %}
                <img src="{{ feeds[entry.feedId].icon }}" />
              {% else %}
                <i class="material-icons">feed</i>
              {% endif %}
            </span>
            {{ feeds[entry.feedId].name }}
          </span>
          <span class="time" title="{{ entry.published }}">{{ entry.relPublished }}</span>
        </div>
      </a>
    {% endfor %}
  </div>
  
  <div id="list-layout" class="rss-list">
    {% for entry in entries %}
      <a rel="noopener"
        {% if Prefs.ReaderMode %}
          href="{{ urlFor('/entry/:entry', { entry: slugifyUrl(entry.link) }) }}"
        {% else %}
          href="{{ entry.link }}" target="_blank"
        {% endif %}
      class="rss-list-item">
        <div class="rss-list-image">
          {% if entry.video %}
            <video src="{{ entry.video }}" controls></video>
          {% elif entry.image %}
            <img src="{{ entry.image }}" loading="lazy" />
          {% endif %}
        </div>
        <div class="rss-list-content">
          <div class="rss-list-title">{{ entry.title or ('&nbsp;' | safe) }}</div>
          <div class="rss-list-preview">{{ entry.summary or ('&nbsp;' | safe) }}</div>
          <div class="rss-list-meta">
            <span>
              <span class="icon">
                {% if feeds[entry.feedId].icon %}
                  <img src="{{ feeds[entry.feedId].icon }}" />
                {% else %}
                  <i class="material-icons">feed</i>
                {% endif %}
              </span>
              {{ feeds[entry.feedId].name }}
            </span>
            <span class="time" title="{{ entry.published }}">{{ entry.relPublished }}</span>
          </div>
        </div>
      </a>
    {% endfor %}
  </div>

  <div id="flow-layout" class="mdl-grid">
    {% for entry in entries %}
      <a rel="noopener"
        {% if Prefs.ReaderMode %}
          href="{{ urlFor('/entry/:entry', { entry: slugifyUrl(entry.link) }) }}"
        {% else %}
          href="{{ entry.link }}" target="_blank"
        {% endif %}
      class="mdl-card mdl-shadow--2dp rss-card mdl-cell mdl-cell--8-col">
        <div class="rss-card-image">
          {% if entry.embed %}
            <iframe {% if entry.image %} style="background-image: url('{{ entry.image }}');" {% endif %} src="{{ entry.embed }}" loading="lazy" allow="fullscreen" allowfullscreen></iframe>
          {% elif entry.video %}
            <video src="{{ entry.video }}" controls></video>
          {% elif entry.image %}
            <img src="{{ entry.image }}" loading="lazy" />
          {% endif %}
        </div>
        {% if entry.title or entry.summary %}
          <div class="rss-card-content">
            <div class="rss-card-title">{{ entry.title }}</div>
            <div class="rss-card-preview">{{ entry.summary }}</div>
          </div>
        {% endif %}
        <div class="rss-card-meta">
          <span>
            <span class="icon">
              {% if feeds[entry.feedId].icon %}
                <img src="{{ feeds[entry.feedId].icon }}" />
              {% else %}
                <i class="material-icons">feed</i>
              {% endif %}
            </span>
            {{ feeds[entry.feedId].name }}
          </span>
          <span class="time" title="{{ entry.published }}">{{ entry.relPublished }}</span>
        </div>
      </a>
    {% endfor %}
  </div>

  <div class="mdl-grid">
    <nav class="demo-nav {# mdl-color-text--grey-600 mdl-color-text--grey-50 #} mdl-cell mdl-cell--12-col">
      {% if page > 1 %}
        <a href="?page={{ page - 1 }}{{ params }}" class="demo-nav__button">
          <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon mdl-color--white mdl-color-text--grey-900" role="presentation" data-upgraded=",MaterialButton,MaterialRipple">
            <i class="material-icons">arrow_back</i>
          <span class="mdl-button__ripple-container"><span class="mdl-ripple"></span></span></button>
          Newer
        </a>
      {% endif %}
      <div class="section-spacer"></div>
      {% if next %}
        <a href="?page={{ next }}{{ params }}" class="demo-nav__button">
          Older
          <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon mdl-color--white mdl-color-text--grey-900" role="presentation" data-upgraded=",MaterialButton,MaterialRipple">
            <i class="material-icons">arrow_forward</i>
          <span class="mdl-button__ripple-container"><span class="mdl-ripple"></span></span></button>
        </a>
      {% endif %}
    </nav>
  </div>

  <script>
    const gridButton = document.getElementById('grid-view');
    const listButton = document.getElementById('list-view');
    const flowButton = document.getElementById('flow-view');

    const gridLayout = document.getElementById('grid-layout');
    const listLayout = document.getElementById('list-layout');
    const flowLayout = document.getElementById('flow-layout');
    
    gridButton.addEventListener('click', function() {
      document.body.classList.remove('list-layout');
      document.body.classList.remove('flow-layout');
      document.body.classList.add('grid-layout');
      gridButton.checked = true;
      listButton.checked = false;
      flowButton.checked = false;
      listButton.parentElement.classList.remove('is-checked');
      flowButton.parentElement.classList.remove('is-checked');
      localStorage.setItem('defaultView', 'grid');
    });
    
    listButton.addEventListener('click', function() {
      document.body.classList.remove('grid-layout');
      document.body.classList.remove('flow-layout');
      document.body.classList.add('list-layout');
      listButton.checked = true;
      gridButton.checked = false;
      flowButton.checked = false;
      gridButton.parentElement.classList.remove('is-checked');
      flowButton.parentElement.classList.remove('is-checked');
      localStorage.setItem('defaultView', 'list');
    });

    flowButton.addEventListener('click', function() {
      document.body.classList.remove('grid-layout');
      document.body.classList.remove('list-layout');
      document.body.classList.add('flow-layout');
      flowButton.checked = true;
      listButton.checked = false;
      gridButton.checked = false;
      gridButton.parentElement.classList.remove('is-checked');
      listButton.parentElement.classList.remove('is-checked');
      localStorage.setItem('defaultView', 'flow');
    });

    const defaultView = localStorage.getItem('defaultView', 'grid');
    if (defaultView) {
      gridButton.checked = listButton.checked = false;
      document.body.classList.remove('grid-layout');
      document.body.classList.remove('list-layout');
      document.body.classList.add(`${defaultView}-layout`);
      document.getElementById(`${defaultView}-view`).checked = true;
    }

    function createWebSocket(url, onmessage) {
      let ws;
      let reconnectInterval = 1000; // 1 second
      let maxRetries = 10;
      let retries = 0;
      connect();
      function connect() {
        ws = new WebSocket(url);
        ws.onopen = () => {
          console.log('✅ Connected');
          retries = 0; // reset on success
        };
        ws.onmessage = onmessage;
        ws.onclose = (event) => {
          console.warn('⚠️ Disconnected:', event.reason);
          if (retries < maxRetries) {
            setTimeout(connect, reconnectInterval);
            retries++;
            reconnectInterval *= 2; // exponential backoff
          } else {
            console.error('❌ Max retries reached');
          }
        };
        ws.onerror = (err) => {
          console.error('💥 WebSocket error:', err.message);
          ws.close(); // trigger onclose
        };
      }
    }

    const loadSpinner = document.getElementById('load-spinner');
    const reloadButton = document.getElementById('reload-button');

    createWebSocket('/ws', (event) => {
      switch (event.data) {
        case 'FEED_UPDATE_STARTED':
        case 'FEEDS_UPDATE_STARTED':
        case 'FEEDS_UPDATE_RUNNING':
          loadSpinner.hidden = false;
          reloadButton.hidden = true;
          break;
        case 'FEED_UPDATE_FINISHED':
        case 'FEEDS_UPDATE_FINISHED':
          loadSpinner.hidden = true;
          reloadButton.hidden = false;
          break;
      }
    });
  </script>
{%- endblock -%}